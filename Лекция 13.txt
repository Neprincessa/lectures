Лекция 13.
Проблемы использования криптографии в прикладныз системах.

Распространенные оишбки при встраивании СКЗИ:
1) ошибки при проектировании и реализации целевых криптографических функций
2) ошибки в коде программы, приводящие к различным уязвимостям
3) 

Ошибки при реализаации целевых криптографических функций:
1. некорректные аргументы функций
2. некорректная работа возвращаемых аргументов
3. при создании / проверки эп, зашифровании не выполняется проверка аактуалньости сертификатов
4. проверка области использования сертификатов
5. проверка сертификатов из цепочки сертификатов

Дублирование хэш значения (код с ошибками)

какой алгоритм будет использоваться для создания криптографических функций

hadleError - при выделении ячейки памяти
cleanUp  - освобождение всех объектов

Оба обхекта хэширования должны были удаляться под конец работы. 

Ошибки в программе, приводящие к уязвимостях:
на собеседованиях часто дают задачи на выявление уязвимостей.
бинарные уязвимости
1) переполнение буфера при записи
	1. отказ обслуживания
	2. загрузка и ывполнение произвольного кода от имени программы 
	3. переполнение буфера при чтении
		heartbleed

	Сегментация памяти text- машинный код, ттольо чтение, data и bss - глобальные и статические переменнные, heap, stack - локальные

	для просмотра инфы о COFF/PE формата получение дизассемблированногокода можно воспольховаться утилийтокомандной строки dumpbin - objdump


Переполнение буфера в куче.
выделяем буфером в куче
Целочисленное переполнение.
Уязвимость из-за:
1) совместное оперирование знаковыми и беззнаковыми числами (сравненение)
2) усечение целых чисел
3) потеря значимости переполнения ( при попытке присвоения какого -то значения переменной)

Уязвимость форматной строки
scanf, prinf, vprintf

что может приести к уязвимоти: 
	char input[100]
	sprintf(input, argv[1])
	printf("%s", input)



Инъекция команды OS.
 выполнение несанкционированных команд через приложение , потому что нет проверок пользовательского ввода. 
 другие команды, котороые приводят к такому: execute, shell execute

Внедрение кода.

Как обнаружить: 
Примеры статических и динамических анализаторов кода:
	1) pvs - studio, sonarQube -  статические анализаторы
	2) flawfinder, cppcheck - статические анализаторы
	3) valgrind, ibm rational purity -  динамические анализаторы кода

защита:
1. настройка компилятора: 
	1) data execute prevention
	2) buffer security check
	3) rendomized base address (aslr)
	4) D_FORTIFY_SOURCE со знач 2
	5) fstack-protector-all
	6) RELRO  с опцией full
	7) wformat -security
2. использование безопасных функций
3. проверка ввоимых данных
4. cob - сетевые экраны, система обнаруженния вторжений

при создании ЭП не забывать про проверку сертификатов

