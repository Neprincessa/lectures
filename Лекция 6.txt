Лекция 6.
Безопасность мобильного устройства: SecureBoot и TrustZone.
Сергей Карасев. 

Технологии доверенной среды обращения.

Архитектура ARM (#TODO почитать)

1. Secure (verified) boot

Зарузка ОС:
4 этапа. 

1) есть код в отеделе памяти, задача - инициализация внутренней оперативной памяти, инициализация кода первиного загрузчика, загружает туда вторичный загрузчик. 
	Так же должен проинициаоизировать внешнюю память. Передает ему управление,
2) Загрузчик 2 уровня: иниц внешней оперативки
	гибкость при производстве ПО за счет неск заг - ов
3) загрузчик 3го уровня. u - boot - необходим для загрузки ядра и ос
4) опасность в том, что загрузка извне может быть неверной, опасной.

Доверенная загрузка:
каждый след элемент удостоверяется предыд
1) verified boot проверяется
 загрузчик первого уровня верифицирует загрузчик второго уровня и тд.
2) ест корень доверия находится в неизменяемой памяти. Заетм реализуем цепочку доверия к последующим компонентам

Что защищает? 
1) Защищаем иерархию загрузчиков
2) ос. trusted  ос
3) ядро
4) системные компоненты 
5) разл firmware 

раздела с пользовательскими данными не защ - ся, но мб удалены при изм режима ! 

Если данные могут меняться, то в доверенной нагрузки проверить не можем, не посчитаем контр сумму. Или можно подписывать (?) данные каждый раз при изменении

Не предоставить несанкцион доступ кк данным, а не защищать. Хм.

Ключи:
1) могут быть исп асимметричные ключи (rsa): root и  image ключ. (разные разработчики по и железа, у них разные ключи)
ROOt(OEM):
	записывается хеш в efuse  (#TODO дописать)

Цепочка доверия:
1) Root of trust
	код Bootrom  и хэш Root ключв, записанный в efuse - можно только 1 раз записать
2) от корня формируем цепочку сертификатов BL2:
	версия
	открыйтй рут 
	откр имэдж
	сертификат ключей
Загрузчик bootrom проверяет root хлюч, проверяет хэш сумму и сверяет с тем, что в  efuse, корректноть сертификатов
	Сертификат образа:
		хэш образа
		версия
	Если целостность проверена, то можно проверять управление. 


BL2 получает управления и действия аналогичные относительно следующих загружаемых компонентов.
Проверяет сертификаты и зап ATF(BL31), Trusted OS(BL32) *в скобкат в терминах arm*, BL33, u - boot (для загрузки любой системы общего назначения например линукс)
С помощью dm - verity  моб прождолена загрузка

2. Дерево хэшей и  dm - verity.
Так быстрее загружается устройство.

Разбиваются на части и вклеиваются остальные. Формируется хэш сумма общего уровня.
Загружаем данные из блока 2, сравниваем с тем, что в таблице, склеиваем с соседним, дальше склеиваем и добираемся до хэша таблицы. Если дошли, то ничего не было изменено, все норм.
log2 N, N -  высота хэш таблицы - сложность алгоритма.
(смотреть где слайд с деревом, где top hash)

Можно распространить цепочку от корня доверия если реализуем подписывание при изменении.


3. Защита от отката от версии.
(важный момент для доверенной цепочки)
1) aka rollback, anti - rollback
2) откат версии -> уязвимости

Защита:
 в Efuse  записывается номер последней версии
 записать версию по в подписанный образ
 при загрузке проверять корректность версии по, не загр последнюю
 при успешной загрузке обновлять только в доверенном хралище
 использовать однократно программируемую память

Существуют атаки на хэш ключа в корне. Они перебором. Мы можем подобрать ключ, если доп биты записаны. Пусть поровну 0 и 1, но если подберем ключ, куда подставим 1, то норм, сломаем. Это за счет прожжения efuse

Новую версию записываем в подписанный образ. Сложность взлома - подобрать правильно подписанный образ


4. Tee & ARM TrustZone

Tee = trusted execution enviroment
Назначение Tee:
1) аппаратно золированная: железо и по могут раб в спец режиме, где обеспечена повышенная безопасность. Задачи: изоляция ресурсов, кода, чтобы ограничить доступ со стороны других компонентов
2) уменьшение trusted code base (tcb). (если код реализован в библиотеке, то код должен быть доверенным, шифрование дб включено в эту базу и тд.)
3) ум -ие поверхности атаки. (уменьшение набора компонентов для атаки: сист вызовы, например)

Применение:
1) изоляция ключей
2) воспроизведение drm - контента: (некоторый медиа контент, им правообладатель распоряжается как ъочет)
	1. L3 - tee не используется
	2. l2 - расшифровка контента в довеенной среде
	3. l1 -  расшифровка, обработка, воспроизв контента - тоже довер - ая среда
3) биометрическая аутентиф - ия. Применение антипруфинг: чтобы не считал по фотографии.
4) моб банк
5) за здоровьем наблюдение

Варианты реализации TEE:
TPM, smart - карта - компонента доверенной среды - внешняя, в нем хранятся ключи, туда подаются расшифрованные / шифрованные данные возвращает обратно. Постепенно происходит интеграция чипа в основной процессор чипа, ибо до этого высокое энергопотребление. 
System on chip - сделали частью доверенной среды исполнения. Это trust zone. Важно: можно ставить / снимать  с них защиту. Позволяет гибко управлять устройствами, хотя много уязвимостей.
Сняли защиту, все проверили, вернули на место, можем спокойно ей распооряжаться.

5. Технология ARM TrustZone.

Normal world, secure world. 
Режимы: пользовательский: без привилегий, ядра, монитора (для переключения из норм режима в безопасный и обратно)
(ошибка на слайде в user mode NS = 0 !!!!)

Режим определяется битов в состоянии процессора в регистре RS. 1 - normal, 0 - secure.
1. secure monitor 
2. trusted application - реализующее сервис в TEE
3. client application - по кличент сервиса. Может делать запросы в обычном режиме
4. secure world - код с повышенной без - тью 

раньше NS  =1, gyper visor находился всегда в обычно режиме, а не безопасном. (почитать про технологию?)

Доступ к ресурсам.

NS - для обращения ко всех периферии, поддерживающей TrustZone(dram, gic, touch, display)
онтроллер дб совместим с TrustZone,  дб интегрирован в компоненты для защиты памяти. 
удобно предоставлять бит ns дополнительным битом адреса

Пример: периферийное устроство cdram не имеет доступа к контроллеру прерываний


Переключения: 
SMC
	atrm smc calling 
IRQ/FIQ (прерывания быстрый и стандартные). Они для разных "миров"
	зависит от версии и настроек gic 
	только стандарт smc

6. Архитектура ПО в TrustZone
1) разработка доверенной ОС 
	параллельное выполнение та
	динамическая загрузка
	изоляция адресных пространств
	недостаток: много кода
2) синхронная библиотека
	на несколько smc несколько инструкций
3) промежуточные решения

Компоненты TEE:
Доверенное ядро, драйвера, пользовательский интерфейс (есть рзазделение между режимом ядра и сервисов)
есть коммуникационный агент, распознающий запрос, передает нужному сервису.
есть клиентский mpi с доверенной средой, может использовать механизмы разделения памяти.
Прочитает файлы через разделенную часть и передает в доверенную среду.

QSEE -  содержит рандомизацию адресного пространства. Злоумышленникам сложнее попасть.
Global platform: ARM, samsung, apple - вырабатывают отраслевые средства безопасности.  Если хочется переносимую систему, то необходимо эти интерфейсы. 

image ключ подписывается root. Сначала проверяется root, дальше image (им подписываются образы загрузчиков, дравйер). 

