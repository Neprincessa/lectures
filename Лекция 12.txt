
Лекция 12.
Access control vulnerabilities in GraphQL APIs.


REST 

Agenda

1. GraphQL  overview

GraphQL ? 
При запросе данных от http  приходит еще куча мусора 
В RESR API:
  выходит много лишних данных 
  за один запрос нельзя запросить больше одной команды
А этот граф позволяет это делать

В реальности: 
граф между бд и клиентом
Если искать ql inj , то будет идти дальше

Типы:
1) query - аналог get -  по сути простой объект. Похож на джсон, но это не он.
	В ответ уже прилетает джсон без лишних данных
2) mutation
	можно поменять данные и запросить сразу
 subscription - строится поверх сокетов и эта штуковина говорит об обновлениях
3) graphQl - схема описывает полностью структуру этого граф 
	особенность: это публичная схема. Можно получить полную карту того, что можно сделать с этим
wc -i ...

transaption query -  обращается к переменным, которые содержат 

Для анализа граф:
1) burp  - не стоит
2) graphiQL - может достраивать синтаксис. Надо доставить и развернуть как удобно
3) GraphQL Voyager - позволяет переварить джсон и получаем граф со своими полями и связями. Копируем transaption query чтобы получить схему
	если смотреть за этими страшными графами, то можно выявить уязимости

Уязвимости:
1) broken edges 
	Объекты и данные можно вещшать на узлы и ребра, где как раз таки нужно проверять. Потому что многие забывают про это, получается, что ребра не защищены

Ideas for further research: 
	1) можно мониторить изменения в схеме. Тестируем эти изменения. Так как схемы публичные, то запрашивать можно постоянно
	2) в графе до объекта есть несколько путей. Соответственно через какой - то другой объект получить еще доступ, это новая уязвимость. Надо автоматизировать посттроение новых путей

Acces conntrol bugs - link 2. Можно с нудя построить свое graphQL приложение .
с появлением voyager  теряется актуалность graphiQL, но она на основе схемы генерировать запросы. Это (graphiQL) помогает при фаззинге. В тул схему генерирует запросы и на атомате отправляяет. Минус: не всегда работает правильно.

Минусы GraphQL:
	надо реализовать и перевести то, что есть. 
	Возможно есть минусы с точки зрения безопасного программированияы