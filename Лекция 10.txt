Лекция 10.
Задача синтеза криптографических протоколов - уязвимости теоретические и реальные.
Васлилий Николаев, крипто про.

Имеется:
1) шифры (блочные и поточные)
2) хеш - функции (ключевые и бесключевые, что - то сказал про блоки. уточнить!)
3) схемы жлектронной подписи. (используется асимметричное шифрование)
4) схемы выработки общего ключа
5) схемы асимметричного шифрования

* с помощью диффи хэлмана получается ключ для хэндшейкка*

1. необходим серьезный анализ
2. сложные математические задачи в основе

Проблемы: 
1) не следят за обновлениями
2) при анализе криптопримитивов и протоколов важно правильно сформулироватьь модель угроз и модель нарушителя
3) модель угроз - что опасно
4) модель нарушителя -- что умеет противник

Побочные каналы: 
1) зачастую не учитываются при анализе и формально не вклюаются в модель
2) пример: ssh, bpp - доказательство стойкости в 2004, а в 2009 атака по побочному каналу, огда стали передавать сообщения по частям


Что такое хорошая электронная подпись (GRM  стойкая):
1. угроза: подделка подписи хотя бы для одного сообщения, которое не набирает противник (не было в сообщение что он просил подписать в черый ящик)
2. эксистенциальный побег. Противник: может делать запросы к черному ящику по своему выбору и с чучтом соверщенных запросов


Атака DSKS:
1) есть ключеваяя подпись, сообщение0, подпись
2) можно натйти другой открытый ключ при использовании которго проверка той же подписи под тем же сообщентием проходи
задача найти такой же ключ не равный 1
3) есть grm -  стойкие схемы эп, уязвимые к аатаке

Применение:
1) анонимный конкурс (по подписи удостоверяются в подлинности)
2) подписание контракта. Подписываеся контракт, но боб не хочет исполнять. Потому что появляется третье лицо , уверяющее что подписывал он , а не боб
3) атаки на схемы AKE. 

Необходиммость обновления: 
1) необходимо следить за усложнениями математическими и обновлениями самих шифров
2) шифр DES : 
	длина ключа 64, на самом деле 56, потому что там есть бит четности
	полный перебор за 3 суток в 1998

Следующая проблема:
	коллизии хэш - функций
	1) для хэш - функции с выходом n бит коллизия с вероятностью 1/0 за о(2^n/2) - парадокс дней рождения
	2) этот анализ для нахождения оптимизированных алг - ов


Первая функция:
MD5:
	1) хэш - функция с выходом 16 байт
	2) коллизия за 2 в степ 39
	3) microsoft использует его для подписи обновлений
	4) вирус Flame мог устанавливать себя вместо этих обновления за счет коллизий

SHA1:
	1) хэш - функция с 20 байт
	2) присутствует в SSL/TSL, IPsoc, сертификаты, электронная почта, git, telegram
	3) 2017, cwi, google, -построена коллизия - SHAttered - реальная коллизия 

SWEET32:
	использование режимов блочных  шифров
		1) блочный шифр с длиной ключа 64 бита с режимом cbc в tls, ssh, openvpn, ipsec
		2) ппарадокс дней рождения: за 2*32 - коллизия блоков шифротекста

Квантовый компьютер:
при появлении полноценного квантового компьютера вся асимметричная криптография разрушится
Для решения проводят конкурс NIST:
опора на использование симметричной криптографии для переживания квантового апокалипсиса

След проблема: 
Защищенность системы определяется даже самойслабым элементом.
Потенциальные проблемы:
1) плоие источники слуяайностти
2) нес

плохие источники случайности
1) источники разного качества (/dev/random vs /dev/urandom) /dev/urandom - нельзя использовать для криптографии, так как выход хуже
2) низкоресурсные устройства (IoT,  платежные карты)

Схема RSA:
	1)  N = pq
	2) есть повторяющиеся простые множители

Схема ECDSA:
	1) используется секретный одноразовый ключ. должен быть сгенерирован уникально
	2) Sony  - использовала для своего кода, некоторые пользователи bitcoin 

Побочные каналы: 
1) что отправляется в канал
2) шум? энергопотербление? скорость работы?
3) очистка памяти

Возможная ошибка: шел закрытый, а потом сразу закрытый канал.

Пример утечек по побочным каналам: Атака на протокод TLS
Lucky13:
	использует разницу по времени проверки mac между сообщениями с корректными и некорректными доп -ми

номер пакета, рассчитывается ключевая хэш функци, этот высчитанный mac приписывается к пакету - это MAC tag. В поля дописываем нужное количество байт. Дописываем пакет до кратности 8 или 16 байт в padding и передаем

HDR|SQN|Payload
	MAC
	Payload | MAC tag | Padding
	 - все получили зашифрованное, передаем.

В протоколе TLS:
есть вектор инициализации, разбиваем по блокам шифрования, получаем первый кусок шифротекста. Ксорим второй с первым блоком шифротекста итд 
На выходе ксорим снова.

Есть некоторый целевой шифротекст: 
генерируем много строк длины = длине блока шифра и подаем на конкатенацию начальной строи и целевого блока шифротекста. При щифровании мы получаем / нет верный padding.. Если нет, идем к след строке
Можем получить неверный код индентификации: означает, что
знаем, что блок есть ксор от целевого пакета. Значем паддинг, строку, и можем получить последние байты шифрованного текста.

След атака на модифицированный протокол  tls
time catana - фиксируем время который отводился на шифрование
Чтобы избежать таких атак: тег идентифик при ошибки считать некорректным
Пусть шифрование шло с помощью AES, рассчитывался там как - то тег с помощью функции. 

блоки перед целевым шифротекстом. навящзываем шифротекст на шифрование  HDT|IV|C!1|C2| xor омега|C) -  в этом случае будет просто ошибка, плохой шифротекст
если угадаем паддинг, попадем в тот случай когда хэширование будет меньше, поэтому разница работы пакета получаем для анализа данных.

Блочные шифры: 
1) чем поможет сферический блочный шифр в вакууме
2) как вырабатываются ключи
3) режим шифрования - можно использовать нехорошим способом, приводящий к утечке данных.
	в реальности ключи не всегда хранились безопасно

Режим ECB: 
	есть одик фикс ключ, делим текст на 8/16 байт и шифруем 

Режим гаммировани:

Режим зацепления: 	4 ни разу не сеекретно, но предсказуемно


Beast:
	атака с выбором открытого текста при известном 4

RSA:
	почитать
Атаки на RSA:

module attack:
	есть 2 разныхх открытых ключа использующие один и тот же модуль
	зная эти шифротексты
	далее расширенный алгоритм евклида - получаем исходный текст 

low exponent attack 
	одно сообзение зашифровано на разных ключах
	по китайской теореме об остатках можно получить исходный шифротекст 

Схема Диффи-Хеллмана
	для протоколов, в том числе хэндшейки
	в циклической группе g есть простой порядок g 
	обмениваются ключами - g в какой - то степени

Проблемы: 
	легко строится атака "человек посередине" 
	помогает иок если она допустима.  (инфраструктура открытых ключей)

Case study: телеграмм
 самописная kdf 
 позднее внедрение pfs 
 много странных решений 

Dsile для него построена модель безопасности.
Самый защищенный мессенджер: vikn (?)



Часть 2. Закладка.
Классификация
	1) ошибки
	2) багдоры
	3) непосредственно закладки (алгоритмические, аппаратные, программыные)

На объект зхэша передали данные потом подпись.

Все ли ошибки не праднамерены
OpenSSl для Debian:
 в пакете openssl  для дистрибутива debian был удален избыточный код
 в итоге вместо случайных значений передавался pid  текущего процесса

 Microsoft CodeSign
  подписывает свой код с помощью секретных ключей
  при релизе библиотеки майкрософта обнаружили отладочные символы (почитать подробнее) 

 Закладки:
	1) хэш функции
		алгоритм  blake - можно написать функцию сложнее? нет
	keccak - снижает уровень безопасности, можно образовать коллизии

Streebog
	захэшировали какие - то свои данные и получили необходимые константы

NUMS:
	можно выбирать случайно константы
	можно определять константы как хэшии от случайных значений
	определять хэщи как от мат констант
	определять константы операторов

Intel Ble Mountain:
	брал часть процессора, шифровал его и исп для задачи преобразования чисел
	Проблема в том, что: 
		возникновение кофнликтов

Symon and Speak
