Лекция 4.
Бинарные уязвимости.


В стеке локальные переменные
на куче - аргументы функций

Адрес возврата - функции знают куда потом возвращаться
1) располагается ниже локальных переменных
2)на стеке хранится адрес, куда будтет передан ход выполнения пограммы


Как осуществлять контроль адреса возврата:
переполнение буфера

1. Переполнение буфера на стеке.

идея: 
1) переполнение для перезаписи стека
2) в буфере передается некоторая полезная нагрузка (payload)
3) адрес перезаписывается на адрес payload
 можно разместить дальше по стеку свои данные, в том числе и шелл код
4) payload - выполняет заложенные в него функции

нет стековой .. - защита от перезаписи

no aslr 

multiib -  это для запуска 32 бит

aslr - для чего (??)


Стратегия: 
1) вычислить количество байт для перезаписи
2) найти адрес на стеке, след после адреса возврата
3) напсать код полезной нагрузки


 vuln func
 установка точки -  dump .

 ставим точку останова -  b "vuln func+60

 stepi - выполнение одной инструкции

 run - запуск и остановка на ретерне
 всегда указывается на вершину стека. -> можно просто брать адрес и перенаправлять поток выполнения программмы на стек, где расположим свои инструкции, свой код.
exploit - пишем свой эксплойт

в pwntools - продвинутый socket  - можно считывать до какого - то момента

все прочитали и теперь отправляем. 
теперь нужен шелл код. 
в ctf могут быть заблокированы какие - то вещи. В прошивках могут быть зашифрованы системые вызовы, можно просто сделать реализацию, чтобы потом сделать клиент - сервер приложение
формируем payload и переходим в интерактивный режим

 Зачем нам эксплойт?  Для того, чтобы вставить свой шелл код.
 Как понять, когда aslr есть / нет? 

*peda - сохраняет сессии*

при генерации шелл будет получен рут доступ

#TODO запросить код и дописать в него коды и попробовать самостоятельно !
#TODO  на гитхабе разбор уязимости, на  dll не было защиты, происходило переполнение стека. 

В подгружаемых dll, особенно старых, скопление уязвимостей. В прошивках контроллеров нет защиты.

Какие есть защиты? 
1) NX/ DEP  -  защита от выполнения кода на стеке
2) stack canary -  защита от перезаписи адреса возврата (есть много способов обхода канарейки, например на линуксе - 4 байта. И канарейка от функции к функции не изменяется. В форкнутом процессе канарейка та, что у родителя. Можно перебором подобрать)
3) ASLR - рандомизация адресного пространства
4) PIE - независимсоть исполняемого файла от конкретных адресов (рандомизирут GOT, .Bss)
5) -D_FORTYfY_SOURCE - замена небезопасных функций копирования 

Stack canary:
1) методика защиты стека
2) защита стрека от перезаписи

Методы обхода канарейки: 
1) steck leak - форматная строка
2) bruteforce

Добавление канарейки: 
убираем ключ, целостность канарейки проверяетясм перед завершением 
будет повреждено некоторе значение перед буфером, его целостность проверяется перед завершением


Пример получения канарейки: 
есть уязвимость форматной строки. можно через нее слить канарейку. Если канарейка одна и та же во всех функциях, то мы можем внедрить ее 
если не указывать формат, то можно указать кучу форматов и не указывать аргументы, тогда выведет все, что находится на стеке. Всё, сдампили. Канарейка и адрес возврата после тогго, что считали.

Обход канарейки:
1) надо высчитать смещение
2) получить и хапомнить канарейки
3) вычислить количество байт для перезаписи канарейки
4) вычислить расстояние от канарейки до перезаписи адреса возврата
5) найти адрес на стеке, седующий после адреса возврата
6) найти / написать код полезной нагрузки

buf - "a" * BUF_SIZE + canary + CANARY_OFFSET + payload_stack_addr + payload


можем считывать определенное количество значений путем передачи индекса, откуда будем считывать

в 32 битных канарейках последний бит = 0 - можно использовать

Если все сделать: можно перезаписать канарейку так, что не возникает конфликтов - канарейка отрабатывается и переадется.

Как нахоидить буфер? 
Теперь меняется 

Надо проверять на стеке, диз ассембл vuln_func. МОжет быть неправильный адрес и не происходит перемещения

Когда надо вкл / выкл ASLR?

Защита стека от выполнения кода: 
1) no executable NX
2) DEP - data 
 не позволяет выполнять данные на стеке / куче

 как обойти: 
 1) можем контродировать адрес возврата
 2) можем вызвать необходимую функцию (или не одну)
 crom гаджеты / цепочки для обхода

 Ret2func:
 1) пусть  есть функция предоставляющая шелл и мы заем ее адре
с
2) мы можем вернуть управление 

Стратегия:
1) преедачи большого буфера
2) перезаписываем адрес возврата на адрес начала функции

Как найти адес функции: 
1) нет pie - глянуть ida
2) получить некоторую утечку и расчитывать его по смещению

payload ='a'*BUF_SIZE + shell_func_addr
(работа с файлом stack...nx)


Ret2libc
Что делать если нет функции, которую можно вызвать? 
libc! 

ldd -  какие библиотеки лежат ? или что ? 

one_gadget-  пытается найти адрес кода в libc.
для высчитывания нужна утечка, за счет этого 
показывается смещение в libc. Если высчитаем адрес нагрузки libc

стратегия: 
1) находим смещение в  one_gadget  в libc
2) находим утечку адреса функции в libc
3) рассчитываем адрес one_gadget
4) формируем пейлодпо типу рет
((дописать с фото))

ROP:
1) возвращает блоки инструкций которые заканчиватся возвратом
(дописать)


основаня идея:
